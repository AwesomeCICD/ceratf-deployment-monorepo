version: 2.1

orbs:
  terraform: circleci/terraform@3.2.1
  aws-cli: circleci/aws-cli@3.1.3


parameters:
  global-changed:
    type: boolean
    default: false
  iaas-changed:  
    type: boolean
    default: false
  platforms-changed: 
    type: boolean
    default: false
  aws-account-id:
    type: string
    default: "992382483259"
  aws-pipeline-iam-prefix:
    #used by pipeline as role, used by tf as role and policy name
    type: string
    default: cera-fe-pipeline
  aws-operator-iam-prefix:
    #used by humans for eks access
    type: string
    default: cera-fe-operator
  aws-sso-assumed-role:
    type: string
    default: AWSReservedSSO_field-engineering-0034ed37_2554f11f982db0cc
    description: The assigned role from IT when users login via SSO.
  root-domain-name:
    type: string
    default: circleci-fieldeng.com



tf_job_defaults: &tf_job_defaults
  context:
    - empty-context #to explicitly generate OIDC tokens
  #tag: "1.5.1"
  pre-steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "4c:17:59:7f:f3:7d:61:e0:08:6d:b5:b3:cb:8b:ef:c6" # belongs to GH user "ceratf-module-bot", should have read to all ceratf-modules
    - aws-cli/install
    - aws-cli/assume-role-with-web-identity:
        role-arn: "arn:aws:iam::<<pipeline.parameters.aws-account-id>>:role/<<pipeline.parameters.aws-pipeline-iam-prefix>>-role"
        role-session-name: "cci-ceratf-deployment-<< pipeline.number >>"
    # We're doing this because BASH_ENV doesn't work with sh, and sh is the shell on the Terraform docker images
    # TODO: Come up with a better solution
    - run:
        name: Create AWS credentials file
        command: |  
          mkdir -p ~/.aws && \
          source $BASH_ENV && \
          cat > ~/.aws/credentials \<<EOF
          [default]
          aws_access_key_id=${AWS_ACCESS_KEY_ID}
          aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
          aws_session_token=${AWS_SESSION_TOKEN}
          EOF
          
    - run:
        name: Install Kubectl
        command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod a+x kubectl
            mv kubectl /usr/local/bin
    - run:
        name: Install Modern TF
        command: |
            cd ~
            curl -LO "https://releases.hashicorp.com/terraform/1.9.2/terraform_1.9.2_linux_amd64.zip"
            unzip terraform_1.9.2*
            chmod a+x terraform
            mv terraform /usr/local/bin

jobs:
  do_nothing:
  #a quirk in our rules only allow downstream jobs to run if at least 1 upstream requires is present.
    resource_class: small
    docker:
      - image: cimg/base:stable
    steps:
      - run: echo "Nothing to see here, move along."
       
  apply_module:
    environment:
      TF_VAR_fe_operator_iam_prefix: <<pipeline.parameters.aws-operator-iam-prefix>>
      TF_VAR_fe_pipeline_iam_prefix: <<pipeline.parameters.aws-pipeline-iam-prefix>>
      TF_VAR_root_domain_name: <<pipeline.parameters.root-domain-name>>
      TF_VAR_fe_sso_iam_role: <<pipeline.parameters.aws-sso-assumed-role>>
    parameters:
      path:
        type: string
      context-suffix:
        type: enum
        enum: [ NAMER, EMEA, JAPAC ]
        default: NAMER
    executor: terraform/default
    steps:
      - unless:
          condition: 
            # non global modules get provider regionalized
            equal: ['./global',<<parameters.path>>]
          steps: 
            - regionalize-providers:
                path: <<parameters.path>>
      - terraform/fmt:
          path: << parameters.path >>
      - terraform/validate:
          path: << parameters.path >>
      - terraform/apply:
          path: << parameters.path >>



workflows:
  primary:
    jobs:
      - do_nothing:
          name: No Op Placeholder Global
          filters: pipeline.parameters.global-changed
      - apply_module:
          name: Global IaC
          path: ./global
          <<: *tf_job_defaults
          filters: pipeline.parameters.global-changed

      - do_nothing:
          name: No Op Placeholder EKS
          requires:
            - No Op Placeholder Global
          filters: pipeline.parameters.iaas-changed or pipeline.parameters.global-changed
      - apply_module:
          name: <<matrix.context-suffix>> EKS IaC
          matrix:
            parameters:
              context-suffix: ["NAMER","EMEA"]
          path: ./namer-eks
          <<: *tf_job_defaults
          requires:
            - Global IaC
            - No Op Placeholder Global
          context:
            - CERA-INIT-<<matrix.context-suffix>>-NEW
          filters: pipeline.parameters.iaas-changed or pipeline.parameters.global-changed

      - apply_module:
          name: <<matrix.context-suffix>> Platform IaC
          path: ./namer-platforms
          matrix:
            parameters:
              context-suffix: ["NAMER","EMEA"]
          <<: *tf_job_defaults
          requires:
            - <<matrix.context-suffix>> EKS IaC
            - No Op Placeholder EKS
          context:
            - CERA-INIT-<<matrix.context-suffix>>-NEW
          filters: pipeline.parameters.platforms-changed or pipeline.parameters.global-changed or pipeline.parameters.iaas-changed

commands:
  regionalize-providers:
    parameters:
      path:
        type: string
    steps:
      - run: 
          name: Set TF Provider Region
          command: |
            echo "Reworking << parameters.path >>/providers.tf for ${TF_VAR_fe_aws_region}"
            mv "<< parameters.path >>/providers.tf" "<< parameters.path >>/providers.tf.bak1"
            sed "s/xx-REPLACEME-nn/${TF_VAR_fe_aws_region}/" "<< parameters.path >>/providers.tf.bak1" > "<< parameters.path >>/providers.tf.bak2"
            sed "s/REPLACEME-sub-domain/${TF_VAR_fe_domain_region}/" "<< parameters.path >>/providers.tf.bak2" > "<< parameters.path >>/providers.tf"
            rm "<< parameters.path >>/providers.tf.bak1" "<< parameters.path >>/providers.tf.bak2"
            cat "<< parameters.path >>/providers.tf"

            echo "Reworking << parameters.path >>/data.tf for ${TF_VAR_fe_aws_region}"
            mv "<< parameters.path >>/data.tf" "<< parameters.path >>/data.tf.bak1"
            sed "s/REPLACEME-sub-domain/${TF_VAR_fe_domain_region}/" "<< parameters.path >>/data.tf.bak1" > "<< parameters.path >>/data.tf"
            rm "<< parameters.path >>/data.tf.bak1"
            cat "<< parameters.path >>/data.tf"
            


