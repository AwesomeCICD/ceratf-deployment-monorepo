version: 2.1

orbs:
  terraform: circleci/terraform@3.2.1
  aws-cli: circleci/aws-cli@4.1.1

# tf_job_defaults: &tf_job_defaults
#   attach-workspace: true
#   context:
#     - empty-context #to explicitly generate OIDC token
#     - tf-deploy-machine-user-key
#   pre-steps: &presteps
#     - checkout
#     - add_ssh_keys:
#         fingerprints:
#           - "4c:17:59:7f:f3:7d:61:e0:08:6d:b5:b3:cb:8b:ef:c6" # belongs to GH user "ceratf-module-bot"
#     - aws-cli/install
#     - aws-cli/assume_role_with_web_identity:
#         role_arn: "arn:aws:iam::483285841698:role/SolutionsEngineeringEKS"
#         role_session_name: "cci-se-eks-cluster-global-<< pipeline.number >>"
#     # We're doing this because BASH_ENV doesn't work with sh, and sh is the shell on the Terraform docker images
#     # TODO: Come up with a better solution
#     - run:
#         name: Create AWS credentials file
#         command: |  
#           mkdir -p ~/.aws && \
#           source $BASH_ENV && \
#           cat > ~/.aws/credentials \<<EOF
#           [default]
#           aws_access_key_id=${AWS_ACCESS_KEY_ID}
#           aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
#           aws_session_token=${AWS_SESSION_TOKEN}
#           EOF

parameters:
  run-orb-tests:
    type: boolean
    default: false
  global:
    type: boolean
    default: false
  namer-eks:  
    type: boolean
    default: false
  namer-platforms: 
    type: boolean
    default: false
  emea-eks:  
    type: boolean
    default: false
  emea-platforms: 
    type: boolean
    default: false
  japac-eks:  
    type: boolean
    default: false
  japac-platforms: 
    type: boolean
    default: false
  destroy_all:
    type: boolean
    default: false
    description: run tf destroy as pipeline user.

jobs:
  global:
    executor: terraform/default
    steps:
      - checkout
      - terraform/fmt:
          path: ./global
      - terraform/validate:
          path: ./global
      - terraform/plan:
          path: ./global
  
  namer-eks:
    docker:
      - image: cimg/base:2023.06
    resource_class: small
    steps:
      - checkout
      - run: 
          name: namer
          command: |
            echo "run namer"
            
  namer-platforms:
    docker:
      - image: cimg/base:2023.06
    resource_class: small
    steps:
        - run: 
            name: namer platforms
            command: |
              echo "namer platforms"
  
  emea-eks:
    docker:
      - image: cimg/base:2023.06
    resource_class: small
    steps:
      - checkout
      - run: 
          name: emea
          command: |
            echo "run emea"
            
  emea-platforms:
    docker:
      - image: cimg/base:2023.06
    resource_class: small
    steps:
        - run: 
            name: emea platforms
            command: |
              echo "emea platforms"
  
  japac-eks:
    docker:
      - image: cimg/base:2023.06
    resource_class: small
    steps:
      - checkout
      - run: 
          name: japac
          command: |
            echo "run japac"
            
  japac-platforms:
    docker:
      - image: cimg/base:2023.06
    resource_class: small
    steps:
        - run: 
            name: japac platforms
            command: |
              echo "japac platforms"

workflows:
  global-workflow:
    when: << pipeline.parameters.global >>
    jobs:
      - global:
          context:
            - empty-context #to explicitly generate OIDC token
            - tf-deploy-machine-user-key
          pre-steps:
            - checkout
            - add_ssh_keys:
                fingerprints:
                  - "4c:17:59:7f:f3:7d:61:e0:08:6d:b5:b3:cb:8b:ef:c6" # belongs to GH user "ceratf-module-bot"
            - aws-cli/install
            - aws-cli/assume_role_with_web_identity:
                role_arn: "arn:aws:iam::483285841698:role/SolutionsEngineeringEKS"
                role_session_name: "cci-se-eks-cluster-global-<< pipeline.number >>"
            # We're doing this because BASH_ENV doesn't work with sh, and sh is the shell on the Terraform docker images
            # TODO: Come up with a better solution
            - run:
                name: Create AWS credentials file
                command: |  
                  mkdir -p ~/.aws && \
                  source $BASH_ENV && \
                  cat > ~/.aws/credentials \<<EOF
                  [default]
                  aws_access_key_id=${AWS_ACCESS_KEY_ID}
                  aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
                  aws_session_token=${AWS_SESSION_TOKEN}
                  EOF
      - namer-eks:
          requires:
            - global
      - namer-platforms:
          requires:
            - namer-eks
      - emea-eks:
          requires:
            - global
      - emea-platforms:
          requires:
            - emea-eks
      - japac-eks:
          requires:
            - global
      - japac-platforms:
          requires:
            - japac-eks
  
  eks_layer_namer:
    when: 
      and: 
        - not: << pipeline.parameters.global >>
        - equal: [ true, <<pipeline.parameters.namer-eks>> ]
    jobs:
      - namer-eks
      - namer-platforms:
          requires:
            - namer-eks

  platform_layer_namer:
    when:
      and: 
       - not: << pipeline.parameters.global >>
       - not: <<pipeline.parameters.namer-eks>>
       - equal: [ true, <<pipeline.parameters.namer-platforms>> ]
    jobs:
      - namer-platforms
  
  eks_layer_emea:
    when: 
      and: 
        - not: << pipeline.parameters.global >>
        - equal: [ true, <<pipeline.parameters.emea-eks>> ]
    jobs:
      - emea-eks
      - emea-platforms:
          requires:
            - emea-eks

  platform_layer_emea:
    when:
      and: 
       - not: << pipeline.parameters.global >>
       - not: <<pipeline.parameters.emea-eks>>
       - equal: [ true, <<pipeline.parameters.emea-platforms>> ]
    jobs:
      - emea-platforms
  
  eks_layer_japac:
    when: 
      and: 
        - not: << pipeline.parameters.global >>
        - equal: [ true, <<pipeline.parameters.japac-eks>> ]
    jobs:
      - japac-eks
      - japac-platforms:
          requires:
            - japac-eks

  platform_layer_japac:
    when:
      and: 
       - not: << pipeline.parameters.global >>
       - not: <<pipeline.parameters.japac-eks>>
       - not: << pipeline.parameters.destroy_all >>
       - equal: [ true, <<pipeline.parameters.japac-platforms>> ]
    jobs:
      - japac-platforms

    # jobs:
    #   - terraform/fmt:
    #       name: terraform fmt
    #       <<: *tf_job_defaults
    #   - terraform/validate:
    #       name: terraform validate
    #       <<: *tf_job_defaults
    #   - terraform/plan:
    #       name: terraform plan
    #       <<: *tf_job_defaults
    #       requires: 
    #         - terraform fmt
    #         - terraform validate
    #   - terraform/apply:
    #       name: terraform apply
    #       <<: *tf_job_defaults
    #       requires: 
    #         - terraform plan
    #       filters:
    #           branches:
    #               only: 
    #                 - main

# jobs:
#       - terraform/fmt:
#           name: terraform fmt
#           <<: *tf_job_defaults
#       - terraform/validate:
#           name: terraform validate
#           <<: *tf_job_defaults
#       - terraform/plan:
#           name: terraform plan
#           <<: *tf_job_defaults
#           requires: 
#             - terraform fmt
#             - terraform validate
#       - wait_for_approval:
#           type: approval
#           requires:
#             - terraform plan
#           filters:
#               branches:
#                   only: 
#                     - main
#       - terraform/apply:
#           name: terraform apply
#           <<: *tf_job_defaults 
#           pre-steps:
#             - *presteps
#             - run: 
#                 name: Setup Ansible
#                 command: |
#                   #ansible needs a small army of libraries
#                   apk add --update --no-cache python3 gcc python3-dev musl-dev libffi-dev
#                   python3 -m ensurepip
#                   python3 -m pip install uptime-kuma-api
#                   python3 -m pip install ansible
#                   ansible-galaxy collection install lucasheld.uptime_kuma
#           requires: 
#             - wait_for_approval
#           filters:
#               branches:
#                   only: 
#                     - main