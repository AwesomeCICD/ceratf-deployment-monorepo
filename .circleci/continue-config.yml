version: 2.1

orbs:
  terraform: circleci/terraform@3.2.1
  aws-cli: circleci/aws-cli@3.1.3


parameters:
  global:
    type: boolean
    default: false
  namer-eks:  
    type: boolean
    default: false
  namer-platforms: 
    type: boolean
    default: false
  aws-account-id:
    type: string
    default: "992382483259"
  aws-pipeline-iam-prefix:
    #used by pipeline as role, used by tf as role and policy name
    type: string
    default: cera-fe-pipeline
  aws-operator-iam-prefix:
    #used by humans for eks access
    type: string
    default: cera-fe-operator
  aws-sso-assumed-role:
    type: string
    default: AWSReservedSSO_devops-ce-0034ed37_ea6f69cdd6bb1a5d 
    description: The assigned role from IT when users login via SSO.
  root_domain_name:
    type: string
    default: circleci-fieldeng.com



tf_job_defaults: &tf_job_defaults
  context:
    - empty-context #to explicitly generate OIDC tokens
  #tag: "1.5.1"
  pre-steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "4c:17:59:7f:f3:7d:61:e0:08:6d:b5:b3:cb:8b:ef:c6" # belongs to GH user "ceratf-module-bot", should have read to all ceratf-modules
    - aws-cli/install
    - aws-cli/assume-role-with-web-identity:
        role-arn: "arn:aws:iam::<<pipeline.parameters.aws-account-id>>:role/<<pipeline.parameters.aws-pipeline-iam-prefix>>-role"
        role-session-name: "cci-ceratf-deployment-<< pipeline.number >>"
    # We're doing this because BASH_ENV doesn't work with sh, and sh is the shell on the Terraform docker images
    # TODO: Come up with a better solution
    - run:
        name: Create AWS credentials file
        command: |  
          mkdir -p ~/.aws && \
          source $BASH_ENV && \
          cat > ~/.aws/credentials \<<EOF
          [default]
          aws_access_key_id=${AWS_ACCESS_KEY_ID}
          aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
          aws_session_token=${AWS_SESSION_TOKEN}
          EOF
          echo "export TF_VAR_fe_pipeline_iam_prefix=<<pipeline.parameters.aws-pipeline-iam-prefix>>" >> $BASH_ENV
          echo "export TF_VAR_fe_operator_iam_prefix=<<pipeline.parameters.aws-operator-iam-prefix>>" >> $BASH_ENV
          echo "export TF_VAR_aws_account_id=<<pipeline.parameters.aws-account-id>>" >> $BASH_ENV
          echo "export TF_VAR_root_domain_name=<<pipeline.parameters.root_domain_name>>" >> $BASH_ENV
          echo "export TF_VAR_fe_sso_iam_role=<<pipeline.parameters.aws-sso-assumed-role>>" >> $BASH_ENV
          
    - run:
        name: Install Kubectl
        command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod a+x kubectl
            mv kubectl /usr/local/bin
    - run:
        name: Install Modern TF
        command: |
            cd ~
            curl -LO "https://releases.hashicorp.com/terraform/1.9.2/terraform_1.9.2_linux_amd64.zip"
            unzip terraform_1.9.2*
            chmod a+x terraform
            mv terraform /usr/local/bin

jobs:
  apply_module:
    parameters:
      path:
        type: string
      first:
        type: boolean
        default: false
    executor: terraform/default
    steps:
      - checkout
      - when: 
          condition: <<parameter.first>>
          steps:
          - run: mkdir workspace
      - when: 
          condition: <<parameter.first>>
          steps:
          - attach_workspace:
              at: /workspace
      - terraform/fmt:
          path: << parameters.path >>
      - terraform/validate:
          path: << parameters.path >>
      - terraform/apply:
          path: << parameters.path >>
      - persist_to_workspace:
          root: workspace
          paths: 
            - ./
  
  
  

workflows:
  global-workflow:
    when: 
      and: 
       - equal: [true,<<pipeline.parameters.global>>] 
    jobs:
      - apply_module:
          name: Global IaC
          path: ./global
          first: true
          <<: *tf_job_defaults
      - apply_module:
          name: Region EKS IaC
          path: ./namer-eks
          <<: *tf_job_defaults
          requires:
            - Global IaC
      - apply_module:
          name: Region Platform IaC
          path: ./namer-platforms
          <<: *tf_job_defaults
          requires:
            - Region EKS IaC
          context:
            - CERA-INIT-NAMER-NEW
     

  
  include_eks:
    when: 
      and: 
        - not: << pipeline.parameters.global >>
        - equal: [ true, <<pipeline.parameters.namer-eks>> ]

    jobs:
      - apply_module:
          name: Region EKS IaC
          path: ./namer-eks
          <<: *tf_job_defaults
      - apply_module:
          name: Region Platform IaC
          path: ./namer-platforms
          <<: *tf_job_defaults
          requires:
            - Region EKS IaC
          context:
            - CERA-INIT-NAMER-NEW

  include_platform_layer:
    when:
      and: 
       - not: << pipeline.parameters.global >>
       - not: <<pipeline.parameters.namer-eks>>
       - equal: [ true, <<pipeline.parameters.namer-platforms>> ]

    jobs:
      - apply_module:
          name: Region Platform IaC
          path: ./namer-platforms
          <<: *tf_job_defaults
          context:
            - CERA-INIT-NAMER-NEW
  

